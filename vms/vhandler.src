;------------------------------------------------------------------------
;                                                                       |
;   FILE        :vhandler.src                                           |
;   DATE        :Sat, Dec 24, 2005                                      |
;   DESCRIPTION :Reset/Interrupt Handler                                |
;   CPU TYPE    :SH7729R                                                |
;                                                                       |
;   This file is generated by H.Hashimoto .								|
;                                                                       |
;------------------------------------------------------------------------
                  
IMASKclr:	.equ	H'FFFFFF0F
RBBLclr:	.equ	H'CFFFFFFF
MDRBBLset:	.equ	H'70000000

CacheOFF_AREA:	.equ	H'A0000000
CacheWB_AREA:	.equ	H'C0000000	

TRA			.equ	H'FFFFFFD0
EXPEVT:		.equ	H'FFFFFFD4
INTEVT:		.equ	H'FFFFFFD8
INTEVT2:	.equ	H'A4000000

VMU_COREID_STATES:	.equ	H'A7000008

TLBCPU_CODE				.equ	H'70
DUMMY_TLBCPU_CODE		.equ	H'A00
TLBProtect_CODE			.equ	H'D0
DUMMY_TLBProtect_CODE	.equ	H'A20

		.import		_vecttbl
		.import		_imasktbl
		.import		_sptbl

		.export		_EXPHandler
		.export		_swap_thread

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;*             macro definition                                *;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                .macro PUSH_EXP_BASE_REG
        stc.l   ssr,@-r15               ; save ssr
        stc.l   spc,@-r15               ; save spc
        sts.l   pr,@-r15                ; save context registers
        stc.l	gbr,@-r15					
    	sts.l	macl,@-r15					
    	sts.l	mach,@-r15
		stc.l   r0_bank,@-r15	
		stc.l   r1_bank,@-r15
        stc.l   r2_bank,@-r15
        stc.l   r3_bank,@-r15
        stc.l   r4_bank,@-r15
        stc.l   r5_bank,@-r15
        stc.l   r6_bank,@-r15
        stc.l   r7_bank,@-r15
                .endm
;
                .macro POP_EXP_BASE_REG
        ldc.l   @r15+,r7_bank           ; recover registers
        ldc.l   @r15+,r6_bank
        ldc.l   @r15+,r5_bank
        ldc.l   @r15+,r4_bank
        ldc.l   @r15+,r3_bank
        ldc.l   @r15+,r2_bank
        ldc.l   @r15+,r1_bank
        ldc.l   @r15+,r0_bank
		lds.l	@r15+,mach
		lds.l	@r15+,macl
		ldc.l	@r15+,gbr
        lds.l   @r15+,pr
        ldc.l   @r15+,spc
        ldc.l   @r15+,ssr
                .endm
						
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;		exceptional interrupt		 							;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		.section	PV_INT,code

_EXPHandler:
				PUSH_EXP_BASE_REG
;				
				mov.l	#EXPEVT,r0			; set event address
				mov.l	@r0,r1				; set exception code
                                            ; SH7729 event code
				mov.l	#TLBCPU_CODE,r2		; H'70
				cmp/eq	r1,r2
				bf		exp_01
				mov.l	#DUMMY_TLBCPU_CODE,r1	; H'70 -> H'A00
				bra		exp_10
exp_01:			mov		#TLBProtect_CODE,r2	; H'D0
				extu.b	r2,r2
				cmp/eq	r1,r2
				bf		exp_10
				mov.l	#DUMMY_TLBProtect_CODE,r1	; H'D0 -> H'A20
exp_10:
				mov.l	#_vecttbl,r0		; set vector table address
				mov.l	@(r0,r7),r0
;
				shlr2	r1
				shlr	r1
				mov.l	@(r0,r1),r3			; set interrupt function addr
;
				mov.l	#_imasktbl,r0		; interrupt mask table address
				mov.l	@(r0,r7),r0
;
				shlr2	r1
				mov.b	@(r0,r1),r1			; interrupt mask
				extu.b	r1,r1
;
				stc		sr,r0				; save sr
				mov.l	#(RBBLclr&IMASKclr),r2		; RB,BL,mask clear data
				and		r2,r0				; clear mask data
				or		r1,r0				; set interrupt mask
				ldc		r0,ssr				; set current status
;
				ldc.l	r3,spc
				mov.l	#__int_term,r0		; set interrupt terminate
				lds		r0,pr
;
				rte
				nop
;
				.pool
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;		Interrupt terminate										;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				.align	4
__int_term:
				mov.l   #MDRBBLset,r0 	; set MD,BL,RB
				ldc.l	r0,sr			; 
				POP_EXP_BASE_REG
				rte					; return
				nop
;
				.pool
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;		TLB miss interrupt										;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		.org	H'300

_TLBmissHandler:
				PUSH_EXP_BASE_REG
;				
				mov.l	#EXPEVT,r0			; set event address
				mov.l	@r0,r1				; set exception code
;				
				mov.l	#_vecttbl,r0		; set vector table address
				mov.l	@(r0,r7),r0
;
				shlr2	r1
				shlr	r1
				mov.l	@(r0,r1),r3			; set interrupt function addr
;
				mov.l	#_imasktbl,r0		; interrupt mask table address
				mov.l	@(r0,r7),r0
;
				shlr2	r1
				mov.b	@(r0,r1),r1			; interrupt mask
				extu.b	r1,r1

				stc		sr,r0				; save sr
				mov.l	#(RBBLclr&IMASKclr),r2		; RB,BL,mask clear data
				and		r2,r0				; clear mask data
				or		r1,r0				; set interrupt mask
				ldc		r0,ssr				; set current status
;
				ldc.l	r3,spc
				mov.l	#__int_term,r0		; set interrupt terminate
				lds		r0,pr
;
				rte
				nop
;
				.pool
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;		IRQ														;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		.org	H'500

_IRQHandler:
				PUSH_EXP_BASE_REG
;								
				mov.l	#INTEVT2,r0			; set event address
				mov.l	@r0,r1				; set exception code
;				
				mov.l	#_vecttbl,r0		; set vector table address
				mov.l	@(r0,r7),r0
;
				shlr2	r1
				shlr	r1
				mov.l	@(r0,r1),r3			; set interrupt function addr
;
				mov.l	#_imasktbl,r0		; interrupt mask table address
				mov.l	@(r0,r7),r0
;
				shlr2	r1
				mov.b	@(r0,r1),r1			; interrupt mask
				extu.b	r1,r1
;
				stc		sr,r0				; save sr
				mov.l	#(RBBLclr&IMASKclr),r2		; RB,BL,mask clear data
				and		r2,r0				; clear mask data
				or		r1,r0				; set interrupt mask
				ldc		r0,ssr				; set current status
;
				ldc.l	r3,spc
				mov.l	#__int_term,r0		; set interrupt terminate
				lds		r0,pr
;
				rte
				nop
;
				.pool
;	
;
		.section	P,code

_swap_thread:	
				mov.l	r8,@-r15			; RB = 0 here
				mov.l	r9,@-r15
				mov.l	r10,@-r15
				mov.l	r11,@-r15
				mov.l	r12,@-r15
				mov.l	r13,@-r15
				mov.l	r14,@-r15
;
				mov.l	r15,r2
				mov.l	#_sptbl,r0
;								
				stc.l	r7_bank,r1
				mov.l	@(r0,r1),r15
				mov.l	r2,@(r0,r1)
;
				mov.l	#VMU_COREID_STATES,r0
				mov.l	#1,r1
				mov.l	r1,@r0
;
				mov.l	@r15+,r14
				mov.l	@r15+,r13
				mov.l	@r15+,r12
				mov.l	@r15+,r11
				mov.l	@r15+,r10
				mov.l	@r15+,r9
				mov.l	@r15+,r8
;
				rts
				nop
;
				.pool
				.end
;